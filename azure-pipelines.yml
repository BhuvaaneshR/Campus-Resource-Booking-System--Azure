trigger:
  branches:
    include:
      - main

# ================== VARIABLES ==================
variables:
  # 1) Bring in your Library > Variable Group
  - group: CampusResourceBookingVariableGroup   # SONAR_TOKEN (secret), sonarOrganization, sonarProjectKey, sonarProjectName

  # 2) Regular name/value vars for infra & CI/CD
  - name: acrName
    value: 'campusbookingacr'
  - name: resourceGroup
    value: 'campusbookingrg'
  - name: backendAppName
    value: 'campus-booking-backend-api'
  - name: frontendAppName
    value: 'campus-booking-frontend-web'
  - name: backendUrl
    value: 'https://campus-booking-backend-api.azurewebsites.net/api'
  - name: azureSubscription
    value: 'azure-students-connection'
  - name: SCANNER_VER
    value: '6.2.1.4610'  

  # (Optional) set SCANNER_VER to force a specific SonarScanner version, e.g. '5.0.1.3006'
  # If unset, we'll default to 6.2.1.4610.
  # - name: SCANNER_VER
  #   value: '5.0.1.3006'

# ================== STAGES ==================
stages:

# ========== STAGE 0: CODE SCAN (SonarCloud via CLI) ==========
- stage: CodeScan
  displayName: 'Static Analysis: SonarCloud (CLI)'
  jobs:
  - job: SonarCLI
    displayName: 'Run SonarScanner CLI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 20.x'
        inputs:
          versionSpec: '20.x'

      - script: |
          set -e
          cd backend
          npm ci --no-audit --no-fund
          npm run build
        displayName: 'Build backend (tsc)'

      - script: |
          set -e
          cd frontend
          npm ci --no-audit --no-fund
          npm run build
        displayName: 'Build frontend (tsc)'

      - task: Bash@3
        displayName: 'Install & run SonarScanner (CLI)'
        env:
          SONAR_TOKEN: $(SONAR_TOKEN)              # from Variable Group (secret)
          SONAR_ORG: $(sonarOrganization)          # from Variable Group
          SONAR_PROJECT_KEY: $(sonarProjectKey)    # from Variable Group
          SONAR_PROJECT_NAME: $(sonarProjectName)  # from Variable Group
          SCANNER_VER: $(SCANNER_VER)              # optional override
        inputs:
          targetType: 'inline'
          script: |
            set -euo pipefail
            : "${SONAR_TOKEN:?SONAR_TOKEN is not set}"
            : "${SONAR_ORG:?SONAR_ORG is not set}"
            : "${SONAR_PROJECT_KEY:?SONAR_PROJECT_KEY is not set}"
            : "${SONAR_PROJECT_NAME:?SONAR_PROJECT_NAME is not set}"

            # ----- Version selection & URL patterns (5.x vs 6.x differ) -----
            VER="${SCANNER_VER:-6.2.1.4610}"
            if [[ "$VER" == 5.* ]]; then
              ZIP="sonar-scanner-cli-${VER}-linux.zip"
              DIR="sonar-scanner-${VER}-linux"
            else
              ZIP="sonar-scanner-cli-${VER}-linux-x64.zip"
              DIR="sonar-scanner-${VER}-linux-x64"
            fi

            URL_PRIMARY="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/${ZIP}"
            URL_FALLBACK="https://get.sonarsource.org/sonar-scanner-cli/${ZIP}"

            echo "Downloading SonarScanner CLI ${VER}..."
            if ! curl -fsSLo "$ZIP" "$URL_PRIMARY"; then
              echo "Primary download failed; trying fallback..."
              curl -fsSLo "$ZIP" "$URL_FALLBACK"
            fi

            echo "Unzipping..."
            unzip -q "$ZIP"

            SCANNER_DIR="$PWD/${DIR}"
            export PATH="$SCANNER_DIR/bin:$PATH"

            echo "SonarScanner version:"
            sonar-scanner --version

            # If you ever see a 403 on 'analysis/engine' with 6.x,
            # you may try adding: -Dsonar.scanner.skipJreProvisioning=true
            sonar-scanner \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.organization="${SONAR_ORG}" \
              -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
              -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
              -Dsonar.sources=. \
              -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.next/**,**/.terraform/** \
              -Dsonar.token="${SONAR_TOKEN}"

# ========== STAGE 1: BUILD AND PUSH DOCKER IMAGES ==========
- stage: Build
  displayName: 'Build and Push Images'
  dependsOn: CodeScan
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        displayName: 'Build and Push Backend'
        inputs:
          containerRegistry: 'campusbookingacr-connection'   # EDIT if your ACR service connection name differs
          repository: 'backend'
          command: 'buildAndPush'
          Dockerfile: 'backend/Dockerfile'
          tags: '$(Build.BuildId)'

      - script: |
          echo "REACT_APP_API_URL=$(backendUrl)" > frontend/.env.production
        displayName: 'Create Frontend .env file'

      - task: Docker@2
        displayName: 'Build and Push Frontend'
        inputs:
          containerRegistry: 'campusbookingacr-connection'    # EDIT if needed
          repository: 'frontend'
          command: 'buildAndPush'
          Dockerfile: 'frontend/Dockerfile'
          buildContext: 'frontend'
          tags: '$(Build.BuildId)'

# ========== STAGE 2: TERRAFORM VALIDATION ==========
- stage: TerraformValidate
  displayName: 'Validate Terraform Configuration'
  dependsOn: []
  jobs:
  - job: Validate
    displayName: 'Terraform Validation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - bash: |
          set -e
          cd terraform
          terraform init -backend=false
          terraform fmt -recursive
          terraform validate
          echo "âœ“ Terraform configuration is valid"
        displayName: 'Validate Terraform Code'

# ========== STAGE 3: DEPLOY APPS ==========
- stage: Deploy
  displayName: 'Deploy Applications'
  dependsOn: Build
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebAppContainer@1
              displayName: 'Deploy Backend App'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(backendAppName)
                containers: '$(acrName).azurecr.io/backend:$(Build.BuildId)'

            - task: AzureWebAppContainer@1
              displayName: 'Deploy Frontend App'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(frontendAppName)
                containers: '$(acrName).azurecr.io/frontend:$(Build.BuildId)'

# ========== (OPTIONAL) STAGE 4: OWASP ZAP BASELINE ==========
- stage: ZapBaseline
  displayName: 'OWASP ZAP Baseline'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Zap
    displayName: 'Run ZAP against Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          set -e
          docker pull owasp/zap2docker-stable
          docker run --user root --rm \
            -v $(System.DefaultWorkingDirectory):/zap/wrk \
            owasp/zap2docker-stable zap-baseline.py \
            -t https://$(frontendAppName).azurewebsites.net \
            -r zap_baseline_report.html \
            -x zap_baseline_report.xml \
            -m 5
        displayName: 'Run ZAP Baseline'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish ZAP report'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/zap_baseline_report.html'
          ArtifactName: 'zap-report'
