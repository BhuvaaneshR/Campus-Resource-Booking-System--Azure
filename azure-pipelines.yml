trigger:
  branches:
    include:
      - main

variables:
  # Azure resources
  acrName: 'campusbookingacr'
  resourceGroup: 'campusbookingrg'
  backendAppName: 'campus-booking-backend-api'
  frontendAppName: 'campus-booking-frontend-web'

  # URL used to build the frontend
  backendUrl: 'https://campus-booking-backend-api.azurewebsites.net/api'

  # Service connections
  azureSubscription: 'azure-students-connection'
  sonarServiceConnection: 'SonarCloudConnection'  # Project Settings > Service connections

  # SonarCloud project info
  sonarOrganization: 'YOUR_SONARCLOUD_ORG'
  sonarProjectKey: 'campus-resource-booking'
  sonarProjectName: 'Campus Resource Booking'

stages:
# ========== STAGE 0: CODE SCAN (SonarCloud via CLI, no service connection) ==========
- stage: CodeScan
  displayName: 'Static Analysis: SonarCloud (CLI)'
  jobs:
  - job: SonarCLI
    displayName: 'Run SonarScanner CLI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Use Node 20.x'

    # Build so the scanner sees sources (adjust if needed)
    - script: |
        cd backend
        npm ci
        npm run build
      displayName: 'Build backend (tsc)'
    - script: |
        cd frontend
        npm ci
        npm run build
      displayName: 'Build frontend (tsc)'

    # Download and run SonarScanner CLI
    - bash: |
        set -e
        curl -sSLo scanner.zip https://get.sonarcloud.io/sonar-scanner-cli-linux.zip
        unzip -q scanner.zip -d $(Agent.BuildDirectory)
        SCANNER="$(Agent.BuildDirectory)"/sonar-scanner-*/bin/sonar-scanner

        "$SCANNER" \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$9788f4888c49bc1638d6f3136dda50e4ef6e0154 \
          -Dsonar.organization=bhuvaanesh-045 \
          -Dsonar.projectKey=Bhuvaanesh-045_Online-Resource-Booking-System \
          -Dsonar.projectName="Online Resource Booking System" \
          -Dsonar.sources=backend,frontend \
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
      displayName: 'Run SonarScanner'


# ========== STAGE 1: BUILD AND PUSH DOCKER IMAGES ==========
- stage: Build
  displayName: 'Build and Push Images'
  dependsOn: CodeScan
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Backend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'
        repository: 'backend'
        command: 'buildAndPush'
        Dockerfile: 'backend/Dockerfile'
        tags: '$(Build.BuildId)'

    - script: |
        echo "REACT_APP_API_URL=$(backendUrl)" > frontend/.env.production
      displayName: 'Create Frontend .env file'

    - task: Docker@2
      displayName: 'Build and Push Frontend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'
        repository: 'frontend'
        command: 'buildAndPush'
        Dockerfile: 'frontend/Dockerfile'
        buildContext: 'frontend'
        tags: '$(Build.BuildId)'

# ========== STAGE 2: TERRAFORM VALIDATION ==========
- stage: TerraformValidate
  displayName: 'Validate Terraform Configuration'
  dependsOn: []  # Can run independently
  jobs:
  - job: Validate
    displayName: 'Terraform Validation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    - bash: |
        cd terraform
        terraform init -backend=false
        terraform fmt -check
        terraform validate
        echo "âœ“ Terraform configuration is valid"
      displayName: 'Validate Terraform Code'

# ========== STAGE 3: DEPLOY APPS ==========
- stage: Deploy
  displayName: 'Deploy Applications'
  dependsOn: Build
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Backend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(backendAppName)
              containers: '$(acrName).azurecr.io/backend:$(Build.BuildId)'

          - task: AzureWebAppContainer@1
            displayName: 'Deploy Frontend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(frontendAppName)
              containers: '$(acrName).azurecr.io/frontend:$(Build.BuildId)'

# ========== (OPTIONAL) STAGE 4: OWASP ZAP BASELINE ==========
# Keep if you want the extra security artifact for the review. Safe to remove.
- stage: ZapBaseline
  displayName: 'OWASP ZAP Baseline'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Zap
    displayName: 'Run ZAP against Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        docker pull owasp/zap2docker-stable
        docker run --user root --rm \
          -v $(System.DefaultWorkingDirectory):/zap/wrk \
          owasp/zap2docker-stable zap-baseline.py \
          -t https://campus-booking-frontend-web.azurewebsites.net \
          -r zap_baseline_report.html \
          -x zap_baseline_report.xml \
          -m 5
      displayName: 'Run ZAP Baseline'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish ZAP report'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/zap_baseline_report.html'
        ArtifactName: 'zap-report'