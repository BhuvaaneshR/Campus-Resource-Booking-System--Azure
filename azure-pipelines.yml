trigger:
  branches:
    include:
      - main

variables:
  # ===== Azure resources (EDIT IF NEEDED) =====
  acrName: 'campusbookingacr'
  resourceGroup: 'campusbookingrg'
  backendAppName: 'campus-booking-backend-api'
  frontendAppName: 'campus-booking-frontend-web'

  # URL used to build the frontend (EDIT IF YOUR API URL DIFFERS)
  backendUrl: 'https://campus-booking-backend-api.azurewebsites.net/api'

  # ===== Service connections (EDIT IF YOUR NAME DIFFERS) =====
  azureSubscription: 'azure-students-connection'

  # ===== SonarCloud project info (EDIT TO MATCH SONARCLOUD) =====
  sonarOrganization: 'bhuvaanesh-045'                           # e.g., your SonarCloud org key
  sonarProjectKey: 'Bhuvaanesh-045_Online-Resource-Booking-System'  # exact Project Key
  sonarProjectName: 'Online Resource Booking System'                 # display name (can have spaces)

stages:

# ========== STAGE 0: CODE SCAN (SonarCloud via CLI) ==========
- stage: CodeScan
  displayName: 'Static Analysis: SonarCloud (CLI)'
  jobs:
  - job: SonarCLI
    displayName: 'Run SonarScanner CLI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 20.x'
        inputs:
          versionSpec: '20.x'

      - script: |
          set -e
          cd backend
          npm ci --no-audit --no-fund
          npm run build
        displayName: 'Build backend (tsc)'

      - script: |
          set -e
          cd frontend
          npm ci --no-audit --no-fund
          npm run build
        displayName: 'Build frontend (tsc)'

      - task: Bash@3
        displayName: 'Install & run SonarScanner (CLI)'
        env:
          SONAR_TOKEN: $(SONAR_TOKEN)           # <-- secret pipeline variable you create
          SONAR_ORG: $(sonarOrganization)       # or hardcode 'bhuvaanesh-045'
          SONAR_PROJECT_KEY: $(sonarProjectKey)
          SONAR_PROJECT_NAME: $(sonarProjectName)
        inputs:
          targetType: 'inline'
          script: |
            set -euo pipefail
            : "${SONAR_TOKEN:?SONAR_TOKEN is not set}"
            : "${SONAR_ORG:?SONAR_ORG is not set}"
            : "${SONAR_PROJECT_KEY:?SONAR_PROJECT_KEY is not set}"
            : "${SONAR_PROJECT_NAME:?SONAR_PROJECT_NAME is not set}"

            VER="6.2.1.4610"
            ZIP="sonar-scanner-cli-${VER}-linux-x64.zip"
            URL="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/${ZIP}"

            echo "Downloading SonarScanner CLI ${VER}..."
            curl -fSLo "$ZIP" "$URL"

            echo "Unzipping..."
            unzip -q "$ZIP"

            SCANNER_DIR="$PWD/sonar-scanner-${VER}-linux-x64"
            export PATH="$SCANNER_DIR/bin:$PATH"

            echo "SonarScanner version:"
            sonar-scanner --version

            # Run scan from repo root. NOTE: quotes protect spaces.
            sonar-scanner \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.organization="${SONAR_ORG}" \
              -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
              -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
              -Dsonar.sources=. \
              -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.next/**,**/.terraform/** \
              -Dsonar.scanner.skipJreProvisioning=true \
              -Dsonar.token="${SONAR_TOKEN}"

# ========== STAGE 1: BUILD AND PUSH DOCKER IMAGES ==========
- stage: Build
  displayName: 'Build and Push Images'
  dependsOn: CodeScan
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        displayName: 'Build and Push Backend'
        inputs:
          containerRegistry: 'campusbookingacr-connection'   # EDIT if your ACR service connection name differs
          repository: 'backend'
          command: 'buildAndPush'
          Dockerfile: 'backend/Dockerfile'
          tags: '$(Build.BuildId)'

      - script: |
          echo "REACT_APP_API_URL=$(backendUrl)" > frontend/.env.production
        displayName: 'Create Frontend .env file'

      - task: Docker@2
        displayName: 'Build and Push Frontend'
        inputs:
          containerRegistry: 'campusbookingacr-connection'    # EDIT if needed
          repository: 'frontend'
          command: 'buildAndPush'
          Dockerfile: 'frontend/Dockerfile'
          buildContext: 'frontend'
          tags: '$(Build.BuildId)'

# ========== STAGE 2: TERRAFORM VALIDATION ==========
- stage: TerraformValidate
  displayName: 'Validate Terraform Configuration'
  dependsOn: []  # Can run independently
  jobs:
  - job: Validate
    displayName: 'Terraform Validation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - bash: |
          set -e
          cd terraform
          terraform init -backend=false
          terraform fmt -recursive   # format files instead of failing with exit code 3
          terraform validate
          echo "âœ“ Terraform configuration is valid"
        displayName: 'Validate Terraform Code'

# ========== STAGE 3: DEPLOY APPS ==========
- stage: Deploy
  displayName: 'Deploy Applications'
  dependsOn: Build
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebAppContainer@1
              displayName: 'Deploy Backend App'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(backendAppName)
                containers: '$(acrName).azurecr.io/backend:$(Build.BuildId)'

            - task: AzureWebAppContainer@1
              displayName: 'Deploy Frontend App'
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(frontendAppName)
                containers: '$(acrName).azurecr.io/frontend:$(Build.BuildId)'

# ========== (OPTIONAL) STAGE 4: OWASP ZAP BASELINE ==========
- stage: ZapBaseline
  displayName: 'OWASP ZAP Baseline'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Zap
    displayName: 'Run ZAP against Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          set -e
          docker pull owasp/zap2docker-stable
          docker run --user root --rm \
            -v $(System.DefaultWorkingDirectory):/zap/wrk \
            owasp/zap2docker-stable zap-baseline.py \
            -t https://$(frontendAppName).azurewebsites.net \
            -r zap_baseline_report.html \
            -x zap_baseline_report.xml \
            -m 5
        displayName: 'Run ZAP Baseline'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish ZAP report'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/zap_baseline_report.html'
          ArtifactName: 'zap-report'
