trigger:
  branches:
    include:
      - main

variables:
  # ===== Azure resources =====
  acrName: 'campusbookingacr'
  resourceGroup: 'campusbookingrg'
  backendAppName: 'campus-booking-backend-api'
  frontendAppName: 'campus-booking-frontend-web'

  # URL used to build the frontend
  backendUrl: 'https://campus-booking-backend-api.azurewebsites.net/api'

  # ===== Service connections (only used in Deploy & Docker tasks) =====
  azureSubscription: 'azure-students-connection'
  # NOTE: We are NOT using a Sonar service connection; we use CLI + token.

  # ===== SonarCloud project info (CLI will use these) =====
  sonarOrganization: 'bhuvaanesh-045'                # <--- set to your SonarCloud org key
  sonarProjectKey: 'Bhuvaanesh-045_Online-Resource-Booking-System'  # <--- your project key
  sonarProjectName: 'Online Resource Booking System'  # <--- your project name

stages:

# ========== STAGE 0: CODE SCAN (SonarCloud via CLI) ==========
- stage: CodeScan
  displayName: 'Static Analysis: SonarCloud (CLI)'
  jobs:
  - job: SonarCLI
    displayName: 'Run SonarScanner CLI'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 20.x'
      inputs:
        versionSpec: '20.x'

    # Build backend so TS sources are emitted (if needed by your rules)
    - script: |
        set -e
        cd backend
        npm ci --no-audit --no-fund
        npm run build
      displayName: 'Build backend (tsc)'

    # Build frontend (optional for SAST but keeps parity)
    - script: |
        set -e
        cd frontend
        npm ci --no-audit --no-fund
        npm run build
      displayName: 'Build frontend (tsc)'

    # Download and run SonarScanner CLI
    - task: Bash@3
      displayName: 'Install & run SonarScanner (CLI)'
      inputs:
        targetType: 'inline'
        script: |
          set -euo pipefail
          VER=5.0.1.3006
          ZIP="sonar-scanner-$VER-linux.zip"

          # Download official CLI
          curl -sSLo "$ZIP" "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$ZIP"

          # Unzip and add to PATH
          unzip -q "$ZIP"
          export PATH="$PWD/sonar-scanner-$VER-linux/bin:$PATH"

          # Run scan (requires a secret variable named SONAR_TOKEN in pipeline variables)
          sonar-scanner \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=$(sonarOrganization) \
            -Dsonar.projectKey=$(sonarProjectKey) \
            -Dsonar.projectName="$(sonarProjectName)" \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.next/** \
            -Dsonar.login=$(SONAR_TOKEN)

# ========== STAGE 1: BUILD AND PUSH DOCKER IMAGES ==========
- stage: Build
  displayName: 'Build and Push Images'
  dependsOn: CodeScan
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Backend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'   # your ACR service connection
        repository: 'backend'
        command: 'buildAndPush'
        Dockerfile: 'backend/Dockerfile'
        tags: '$(Build.BuildId)'

    - script: |
        echo "REACT_APP_API_URL=$(backendUrl)" > frontend/.env.production
      displayName: 'Create Frontend .env file'

    - task: Docker@2
      displayName: 'Build and Push Frontend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'
        repository: 'frontend'
        command: 'buildAndPush'
        Dockerfile: 'frontend/Dockerfile'
        buildContext: 'frontend'
        tags: '$(Build.BuildId)'

# ========== STAGE 2: TERRAFORM VALIDATION ==========
- stage: TerraformValidate
  displayName: 'Validate Terraform Configuration'
  dependsOn: []  # Can run independently
  jobs:
  - job: Validate
    displayName: 'Terraform Validation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    - bash: |
        set -e
        cd terraform
        terraform init -backend=false
        terraform fmt -check
        terraform validate
        echo "âœ“ Terraform configuration is valid"
      displayName: 'Validate Terraform Code'

# ========== STAGE 3: DEPLOY APPS ==========
- stage: Deploy
  displayName: 'Deploy Applications'
  dependsOn: Build
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Backend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(backendAppName)
              containers: '$(acrName).azurecr.io/backend:$(Build.BuildId)'

          - task: AzureWebAppContainer@1
            displayName: 'Deploy Frontend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(frontendAppName)
              containers: '$(acrName).azurecr.io/frontend:$(Build.BuildId)'

# ========== (OPTIONAL) STAGE 4: OWASP ZAP BASELINE ==========
- stage: ZapBaseline
  displayName: 'OWASP ZAP Baseline'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Zap
    displayName: 'Run ZAP against Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        set -e
        docker pull owasp/zap2docker-stable
        docker run --user root --rm \
          -v $(System.DefaultWorkingDirectory):/zap/wrk \
          owasp/zap2docker-stable zap-baseline.py \
          -t https://$(frontendAppName).azurewebsites.net \
          -r zap_baseline_report.html \
          -x zap_baseline_report.xml \
          -m 5
      displayName: 'Run ZAP Baseline'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish ZAP report'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/zap_baseline_report.html'
        ArtifactName: 'zap-report'
