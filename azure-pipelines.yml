trigger:
  branches:
    include:
      - main

variables:
  # Names of your Azure resources
  acrName: 'campusbookingacr'
  resourceGroup: 'campusbookingrg'
  backendAppName: 'campus-booking-backend-api'
  frontendAppName: 'campus-booking-frontend-web'
  
  # URL used to build the frontend
  backendUrl: 'https://campus-booking-backend-api.azurewebsites.net/api'
  
  # Name of your Azure subscription service connection
  azureSubscription: 'azure-students-connection'

stages:
# ========== STAGE 1: BUILD AND PUSH DOCKER IMAGES ==========
- stage: Build
  displayName: 'Build and Push Images'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    
    # Build and Push Backend Image
    - task: Docker@2
      displayName: 'Build and Push Backend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'
        repository: 'backend'
        command: 'buildAndPush'
        Dockerfile: 'backend/Dockerfile'
        tags: '$(Build.BuildId)'

    # Create .env file for Frontend build
    - script: |
        echo "REACT_APP_API_URL=$(backendUrl)" > frontend/.env.production
      displayName: 'Create Frontend .env file'

    # Build and Push Frontend Image
    - task: Docker@2
      displayName: 'Build and Push Frontend'
      inputs:
        containerRegistry: 'campusbookingacr-connection'
        repository: 'frontend'
        command: 'buildAndPush'
        Dockerfile: 'frontend/Dockerfile'
        buildContext: 'frontend'
        tags: '$(Build.BuildId)'

# ========== STAGE 2: DEPLOY INFRASTRUCTURE AND APPS ==========
- stage: Deploy
  displayName: 'Deploy Infrastructure and Apps'
  dependsOn: Build
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production' # Targets the environment you just created
    strategy:
      runOnce:
        deploy:
          steps:
          # --- Terraform Infrastructure Steps ---
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              # NOTE: You will need a Storage Account for Terraform state in a real pipeline
              # For this project, we'll use the local state in the agent for simplicity.

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: 'azure-students-connection'    

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: '-auto-approve'

          # --- Application Deployment Steps ---
          - task: AzureWebAppContainer@1
            displayName: 'Deploy Backend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(backendAppName)
              containers: '$(acrName).azurecr.io/backend:$(Build.BuildId)'

          - task: AzureWebAppContainer@1
            displayName: 'Deploy Frontend App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(frontendAppName)
              containers: '$(acrName).azurecr.io/frontend:$(Build.BuildId)'